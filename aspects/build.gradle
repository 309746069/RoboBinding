buildscript {
	repositories {
		mavenCentral()
		maven() {
			name 'RoboBinding AspectJPlugin Maven Repository'
			url "https://github.com/RoboBinding/RoboBinding-aspectj-plugin/raw/master/mavenRepo"
			//url "file://D:/git/RoboBinding-aspectj-plugin/mavenRepo"
		}
	}

	dependencies {
		classpath 'org.robobinding:aspectj-plugin:0.8.+'
		classpath 'com.github.townsfolk:gradle-release:1.2'
	}
}

apply plugin: 'org.robobinding.aspectj'


archivesBaseName = 'robobinding'

repositories {
    mavenCentral()
}

configurations {
	javadocTaglet
	dependencyJar
	proguardArchives
}

ext {
	aspectjVersion = '1.8.2'
	hamcrestVersion = '1.3'	
}

dependencies {
	compile "org.aspectj:aspectjrt:$aspectjVersion"
	compile project(':framework')
	
	testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
	testCompile ("junit:junit:$junitVersion") {
		exclude group: 'org.hamcrest', module: 'hamcrest-core'
	}
	
	javadocTaglet project(':javadoc-taglet')
	
	dependencyJar "org.aspectj:aspectjrt:$aspectjVersion"
}

javadoc {
	source = sourceSets.main.allJava + project(':framework').sourceSets.main.allJava
	
	options.taglets = ['org.robobinding.doctaglet.EventTaglet', 'org.robobinding.doctaglet.PropTaglet']
	options.addStringOption "tagletpath", configurations.javadocTaglet.asPath
	
	include 'org/robobinding/*Exception.*'
	include 'org/robobinding/*Errors.*'
	include 'org/robobinding/**/package-info.java'
	
	include 'org/robobinding/BindingContext.java'
	include 'org/robobinding/ItemBinder.java'
	include 'org/robobinding/MenuBinder.java'
	include 'org/robobinding/PredefinedPendingAttributesForView.java'
	include 'org/robobinding/SubViewBinder.java'
	include 'org/robobinding/ViewBinder.java'
	exclude 'org/robobinding/ViewResolutionErrors.java'
	
	include 'org/robobinding/annotation/*.java'
	
	include 'org/robobinding/attribute/*.java'
	
	include 'org/robobinding/binder/BinderFactory.java'
	include 'org/robobinding/binder/BinderFactoryBuilder.java'
	include 'org/robobinding/binder/Binders.java'
	
	include 'org/robobinding/dynamicbinding/DynamicViewBinding.java'
	include 'org/robobinding/dynamicbinding/DynamicViewBindingDescription.java'
	
	include 'org/robobinding/itempresentationmodel/*.java'
	exclude 'org/robobinding/itempresentationmodel/ItemPresentationModelFactory.java'
	
	include 'org/robobinding/presentationmodel/AbstractPresentationModel.java'
	include 'org/robobinding/presentationmodel/PresentationModelAdapter.java'
	include 'org/robobinding/presentationmodel/PresentationModelChangeSupport.java'
	
	include 'org/robobinding/test/*.java'
	
	include 'org/robobinding/viewattribute/**/*.java'
	exclude 'org/robobinding/viewattribute/impl/**'
	
	include 'org/robobinding/widget/**/*Event.java'
	include 'org/robobinding/widget/**/*Binding*.java'
	
	include 'org/robobinding/aspects/*.java'
}

jar {
	classifier = 'raw-with-aop'
}

task proguardJar(type: Jar, dependsOn: jar) {
	classifier = 'with-aop'
	from(sourceSets.main.output) {
        exclude "**/package-info.class"
    }
	from project(':framework').proguardJar.outputs.files.collect{ it.isDirectory() ? it : zipTree(it) }
}

task proguardJarWithDependencies(type: Jar, dependsOn: jar) {
	classifier = 'with-aop-and-dependencies'
	from(sourceSets.main.output) {
        exclude "**/package-info.class"
    }
	from project(':framework').proguardJarWithDependencies.outputs.files.collect{ it.isDirectory() ? it : zipTree(it) }
	from configurations.dependencyJar.collect { it.isDirectory() ? it : zipTree(it) }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource + project(':framework').sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
	proguardArchives proguardJar
	proguardArchives proguardJarWithDependencies
	proguardArchives sourcesJar
	proguardArchives javadocJar
}

apply plugin: 'maven'
uploadProguardArchives {
	repositories {
		mavenDeployer {
			repository(url: "file://$projectDir/mavenRepo")
		}
	}
}


apply plugin: 'release'
createReleaseTag.dependsOn project(':framework').uploadProguardArchives, uploadProguardArchives


apply plugin: 'eclipse'

eclipse {
	project {
		name = 'RoboBinding-aspects'
		comment = 'The RoboBinding aspects'
		
		natures 'org.springsource.ide.eclipse.gradle.core.nature'
		natures 'org.eclipse.ajdt.ui.ajnature'
		
		buildCommands.clear()
		buildCommand 'org.eclipse.ajdt.core.ajbuilder'
	}
	
	classpath {
		containers 'org.springsource.ide.eclipse.gradle.classpathcontainer'
		/*
		file.withXml {
			def node = it.asNode()
			
			node.appendNode('classpathentry kind="src" path="src/main/java"')
			node.appendNode('classpathentry kind="src" path="src/test/java"')
		}*/
	}
}
  
